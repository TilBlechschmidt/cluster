import { Construct } from 'constructs';
import { Env, Secret, Service, ServiceType, StatefulSet, Volume } from 'cdk8s-plus-26';
import { createHostPathVolume } from '../../../helpers';

export interface InfluxProps {
    /// The username to set for the system's initial super-user
    readonly user: string;

    /// The password to set for the system's inital super-user
    readonly password: string;

    /// The name to set for the system's initial organization
    readonly org: string;

    /// The name to set for the system's initial bucket
    readonly bucket: string;

    /// The duration the system's initial bucket should retain data. If not set, the initial bucket will retain data forever.
    readonly retention: string;

    /// The authentication token to associate with the system's initial super-user. If not set, a token will be auto-generated by the system.
    readonly token: string;
}

export class Influx extends Construct {
    serviceName: string;
    token: string;

    constructor(scope: Construct, id: string, props: InfluxProps) {
        super(scope, id);

        const secret = new Secret(this, 'user', {
            stringData: {
                DOCKER_INFLUXDB_INIT_USERNAME: props.user,
                DOCKER_INFLUXDB_INIT_PASSWORD: props.password,
                DOCKER_INFLUXDB_INIT_ORG: props.org,
                DOCKER_INFLUXDB_INIT_BUCKET: props.bucket,
                DOCKER_INFLUXDB_INIT_RETENTION: props.retention,
                DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: props.token,
                DOCKER_INFLUXDB_INIT_MODE: 'setup'
            }
        });

        const service = new Service(this, id, {
            type: ServiceType.CLUSTER_IP,
            ports: [{ port: 80, targetPort: 8086 }],
        });

        const statefulSet = new StatefulSet(this, 'db', { service });

        const container = statefulSet.addContainer({
            image: 'influxdb:2.7-alpine',
            portNumber: 8086,
            envFrom: [Env.fromSecret(secret)],
            securityContext: {
                ensureNonRoot: false
            },
            resources: {}
        });

        container.mount('/tmp', Volume.fromEmptyDir(this, 'tmp', 'tmp'));
        container.mount('/var/lib/influxdb2', createHostPathVolume(this, `data`));

        this.serviceName = service.name;
        this.token = props.token;
    }
}